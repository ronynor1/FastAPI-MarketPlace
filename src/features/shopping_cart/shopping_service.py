"""
ShoppingService is the service for shopping cart
"""
from bson import ObjectId
from src.models.products import Product
from src.features.shopping_cart.shopping_data_access import ShoppingDataAccess


class ShoppingService():
    """
    ShoppingService is responsible for shopping cart functionalities
    """
    def __init__(self):
        self.shopping_data_access = ShoppingDataAccess()

    def get_products(self, products_ids: list[str]) -> list[Product]:
        """
        This function gets all products from db by array of IDs

        params:
            - products_ids: the purchased products
        """
        products_ids = [ObjectId(element) for element in products_ids]
        products = self.shopping_data_access.get_products(products_ids)
        return products

    def get_total_price(self, products: list[Product]) -> int:
        """
        This function calculates the total price of the purchased products

        params:
            - products: the purchased products
        """
        price = 0
        for product in products:
            price += int(product.get("price"))
        return price

    def insert_order(self, user_id: ObjectId, products: list[dict], client_secret_id: str) -> None:
        """
        This function inserts the order into the db

        params:
            - user_id: the logged in user
            - products: the purchased products
            - client_secret_id: unique ID generated by stripe
        """
        self.shopping_data_access.insert_order(user_id, products, client_secret_id)

    def update_order_status(self, client_secret_id: str, status: str) -> None:
        """
        This function updates the order in the db

        params:
            - client_secret_id: unique ID generated by stripe
            - status: SUCCESS, FAILED
        """
        self.shopping_data_access.update_order_status(client_secret_id, status)
